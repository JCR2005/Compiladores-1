// @generated by Peggy 4.2.0.
//
// https://peggyjs.org/


function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { start: peg$parsestart };
  var peg$startRuleFunction = peg$parsestart;

  var peg$c0 = "\n";
  var peg$c1 = "void";
  var peg$c2 = "main";
  var peg$c3 = "(";
  var peg$c4 = ")";
  var peg$c5 = "{";
  var peg$c6 = "}";
  var peg$c7 = "print";
  var peg$c8 = ";";
  var peg$c9 = "=";
  var peg$c10 = "+";
  var peg$c11 = "-";
  var peg$c12 = "*";
  var peg$c13 = "/";
  var peg$c14 = "^";
  var peg$c15 = ">";
  var peg$c16 = "<";
  var peg$c17 = "==";
  var peg$c18 = ">=";
  var peg$c19 = "<=";
  var peg$c20 = "!=";
  var peg$c21 = "true";
  var peg$c22 = "false";
  var peg$c23 = "\"";
  var peg$c24 = "int";
  var peg$c25 = "float";
  var peg$c26 = "string";
  var peg$c27 = "char";
  var peg$c28 = "bool";
  var peg$c29 = ".";
  var peg$c30 = "||";
  var peg$c31 = "&&";
  var peg$c32 = "!";

  var peg$r0 = /^[ \t\n\r]/;
  var peg$r1 = /^[(-){}]/;
  var peg$r2 = /^[;=]/;
  var peg$r3 = /^[(-)]/;
  var peg$r4 = /^[^"\n\r]/;
  var peg$r5 = /^[a-zA-Z0-9]/;
  var peg$r6 = /^[\\_a-zA-Z0-9]/;
  var peg$r7 = /^[+\-]/;
  var peg$r8 = /^[0-9]/;

  var peg$e0 = peg$otherExpectation("whitespace");
  var peg$e1 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);
  var peg$e2 = peg$literalExpectation("\n", false);
  var peg$e3 = peg$anyExpectation();
  var peg$e4 = peg$classExpectation([["(", ")"], "{", "}"], false, false);
  var peg$e5 = peg$classExpectation([";", "="], false, false);
  var peg$e6 = peg$classExpectation([["(", ")"]], false, false);
  var peg$e7 = peg$literalExpectation("void", false);
  var peg$e8 = peg$literalExpectation("main", false);
  var peg$e9 = peg$literalExpectation("(", false);
  var peg$e10 = peg$literalExpectation(")", false);
  var peg$e11 = peg$literalExpectation("{", false);
  var peg$e12 = peg$literalExpectation("}", false);
  var peg$e13 = peg$literalExpectation("print", false);
  var peg$e14 = peg$literalExpectation(";", false);
  var peg$e15 = peg$literalExpectation("=", false);
  var peg$e16 = peg$literalExpectation("+", false);
  var peg$e17 = peg$literalExpectation("-", false);
  var peg$e18 = peg$literalExpectation("*", false);
  var peg$e19 = peg$literalExpectation("/", false);
  var peg$e20 = peg$literalExpectation("^", false);
  var peg$e21 = peg$literalExpectation(">", false);
  var peg$e22 = peg$literalExpectation("<", false);
  var peg$e23 = peg$literalExpectation("==", false);
  var peg$e24 = peg$literalExpectation(">=", false);
  var peg$e25 = peg$literalExpectation("<=", false);
  var peg$e26 = peg$literalExpectation("!=", false);
  var peg$e27 = peg$literalExpectation("true", false);
  var peg$e28 = peg$literalExpectation("false", false);
  var peg$e29 = peg$literalExpectation("\"", false);
  var peg$e30 = peg$classExpectation(["\"", "\n", "\r"], true, false);
  var peg$e31 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"]], false, false);
  var peg$e32 = peg$classExpectation(["\\", "_", ["a", "z"], ["A", "Z"], ["0", "9"]], false, false);
  var peg$e33 = peg$literalExpectation("int", false);
  var peg$e34 = peg$literalExpectation("float", false);
  var peg$e35 = peg$literalExpectation("string", false);
  var peg$e36 = peg$literalExpectation("char", false);
  var peg$e37 = peg$literalExpectation("bool", false);
  var peg$e38 = peg$classExpectation(["+", "-"], false, false);
  var peg$e39 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e40 = peg$literalExpectation(".", false);
  var peg$e41 = peg$literalExpectation("||", false);
  var peg$e42 = peg$literalExpectation("&&", false);
  var peg$e43 = peg$literalExpectation("!", false);

  var peg$f0 = function(elementos) {

      return {
        elementos,
         datosMap:tablaSimboloGeneral,
         errors: errores
      };
  };
  var peg$f1 = function(fm, b2, el) {
  return {
    fm: fm || null,
    b2: b2,
    el: el  
  };
};
  var peg$f2 = function(cv) { return { tipo: "creacion", valor: cv }; };
  var peg$f3 = function(pr) { return { tipo: "printe", valor: pr }; };
  var peg$f4 = function(exb) { return {tipo:"operacion boolena", valor:exb}};
  var peg$f5 = function(exbn) { return { tipo: "boolean", valor: exbn}};
  var peg$f6 = function(ex) { return { tipo: "expresione", valor: ex }; };
  var peg$f7 = function(contenido) {
     
  };
  var peg$f8 = function(contenido) {
      return contenido;
  };
  var peg$f9 = function() { return { tipo: "instruccion", valor: "print" }; };
  var peg$f10 = function() { return { tipo: "instruccion", valor: "creacion" }; };
  var peg$f11 = function(token) {
    const pos = location();
    let er = "| Error LEXICO |"+"linea: "+pos.start.line+" columna: "+pos.start.column+" |token no reconocido: "+token+"|" ;
    errores.push(er);
      return {
        tipo: "errorLexico",
        valor: token,
        linea: pos.start.line,
        columna: pos.start.column
      };
  };
  var peg$f12 = function() { return "+"; };
  var peg$f13 = function() { return "-"; };
  var peg$f14 = function() { return "*"; };
  var peg$f15 = function() { return "/"; };
  var peg$f16 = function() { return "^"; };
  var peg$f17 = function() { return ">"};
  var peg$f18 = function() { return "<"};
  var peg$f19 = function() { return "=="};
  var peg$f20 = function() { return ">=" };
  var peg$f21 = function() { return "<=" };
  var peg$f22 = function() { return "!="};
  var peg$f23 = function() { return true; };
  var peg$f24 = function() { return false; };
  var peg$f25 = function(chars) {

    return chars.join("");
};
  var peg$f26 = function(letras) {
      return letras.join("");
    };
  var peg$f27 = function(bo) { 
 return {valor:bo, tipo:"bool"} 
};
  var peg$f28 = function(ex) {
    const esEntero = Number.isInteger(ex);
    const tipoLiteral = esEntero ? "int" : "float";
   return {valor:ex, tipo:tipoLiteral} 
};
  var peg$f29 = function(ca) {
  return {valor:ca, tipo:"string"} 
};
  var peg$f30 = function(tv, id, ex) {
      const pos = location();
     
      console.log("ex:", ex.valor, " id: ", id);
    
      console.log("tipoLiteral:", ex.tipo);


      if(tablaSimboloGeneral.has(id)){

          console.log("id exite en la tabla"+id);
        let er = "| Error SEMANTICO |"+"linea: "+pos.start.line+" columna: "+pos.start.column+" |declaracion de variable duplicada: "+id+" ya esta declarada|" ;
        errores.push(er);
      }else{
        if(tv!==ex.tipo){
        
          console.log("no es compatible");
          console.log(pos.start.line);
          console.log(pos.start.column);
          console.log("▸ LLEGUÉ al punto donde voy a imprimir er");
          let er = "| Error SEMANTICO |"+"linea: "+pos.start.line+" columna: "+pos.start.column+" |asignacion incompatible a "+id+" : "+tv+"→"+ex.tipo+"|" ;
          errores.push(er);
        }else{   
          if(!errorSintactico){
            console.log("guadando en la tabla a "+id);
            tablaSimboloGeneral.set(id, ex.valor); 
          }
          errorSintactico=false;
         
        }
      }
    
};
  var peg$f31 = function(head, tail) {
      return tail.reduce((res, [ , op, , val]) =>
        op === "+" ? res + val : res - val
      , head);
    };
  var peg$f32 = function(head, tail) {
      return tail.reduce((res, [ , op, , val]) =>
        op === "*" ? res * val : res / val
      , head);
    };
  var peg$f33 = function(head, tail) {
      return tail.reduce((res, [ , , , val]) =>
        Math.pow(res, val)
      , head);
    };
  var peg$f34 = function(expr) { return expr; };
  var peg$f35 = function(s, d) {
      return parseInt((s !== null ? s : "") + d.join(""), 10);
    };
  var peg$f36 = function(s, i, f) {
      return parseFloat((s !== null ? s : "") + i.join("") + "." + f.join(""));
    };
  var peg$f37 = function(left, tail) {
      return tail.reduce((acc, [ , , , right]) => acc || right, left);
    };
  var peg$f38 = function(left, tail) {
      return tail.reduce((acc, [ , , , right]) => acc && right, left);
    };
  var peg$f39 = function(expr) { return !expr; };
  var peg$f40 = function(expr) { return expr; };
  var peg$f41 = function(expr) { return expr; };
  var peg$f42 = function(bo) { return bo; };
  var peg$f43 = function(expr) { return expr; };
  var peg$f44 = function(expr) { return expr; };
  var peg$f45 = function(left, op, right) {
      switch (op) {
        case ">": return left > right;
        case "<": return left < right;
        case ">=": return left >= right;
        case "<=": return left <= right;
        case "==": return left == right;
        case "!=": return left != right;
      }
  };
  var peg$f46 = function(left, op, right) {
      switch (op) {
        case "==": return left == right;
        case "!=": return left != right;
        default:
           const pos = location();
            errorSintactico=true;
            let er = "| Error SEMANTICO |"+"linea: "+pos.start.line+" columna: "+pos.start.column+" |Operador relacional no válido para cadenas: "+op+" |" ;
            errores.push(er);
            
      }
  };
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsebloqueInstrucciones1();
    peg$savedPos = s0;
    s1 = peg$f0(s1);
    s0 = s1;

    return s0;
  }

  function peg$parsebloqueInstrucciones1() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parsefuncionMain();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parse_();
    s4 = [];
    s5 = peg$parsebloqueInstrucciones2();
    while (s5 !== peg$FAILED) {
      s4.push(s5);
      s5 = peg$parsebloqueInstrucciones2();
    }
    s5 = peg$parse_();
    s6 = [];
    s7 = peg$parseerrorLexico();
    while (s7 !== peg$FAILED) {
      s6.push(s7);
      s7 = peg$parseerrorLexico();
    }
    peg$savedPos = s0;
    s0 = peg$f1(s2, s4, s6);

    return s0;
  }

  function peg$parsebloqueInstrucciones2() {
    var s0, s1, s2, s3, s4;

    s0 = [];
    s1 = peg$currPos;
    s2 = peg$parse_();
    s3 = peg$parseintruccionbloque2();
    if (s3 === peg$FAILED) {
      s3 = peg$parseerrorLexico();
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parse_();
      s2 = [s2, s3, s4];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$currPos;
        s2 = peg$parse_();
        s3 = peg$parseintruccionbloque2();
        if (s3 === peg$FAILED) {
          s3 = peg$parseerrorLexico();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s2 = [s2, s3, s4];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseintruccionbloque2() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parsecreacionVariable();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f2(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      s2 = peg$parseprint();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f3(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        s2 = peg$parseorExpresion();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f4(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          s2 = peg$parseexpresionBooleanaNumerica();
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f5(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            s2 = peg$parseexpresionNumerica();
            if (s2 !== peg$FAILED) {
              s3 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f6(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsebloqueInstrucciones3() {
    var s0;

    s0 = '';

    return s0;
  }

  function peg$parsefuncionMain() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parsevoid();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parsemain();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parsepar1();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parsepar2();
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s10 = peg$parsecorch1();
            if (s10 !== peg$FAILED) {
              s11 = peg$parse_();
              s12 = peg$parsebloqueInstrucciones2();
              if (s12 === peg$FAILED) {
                s12 = null;
              }
              s13 = peg$parse_();
              s14 = peg$parsecorch2();
              if (s14 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f7(s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebloqueInstrucciones() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parse_();
    s4 = peg$parseinstruccion();
    if (s4 === peg$FAILED) {
      s4 = peg$parseerrorLexico();
    }
    if (s4 !== peg$FAILED) {
      s5 = peg$parse_();
      s3 = [s3, s4, s5];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$parse_();
      s4 = peg$parseinstruccion();
      if (s4 === peg$FAILED) {
        s4 = peg$parseerrorLexico();
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s3 = [s3, s4, s5];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    peg$savedPos = s0;
    s1 = peg$f8(s1);
    s0 = s1;

    return s0;
  }

  function peg$parseinstruccion() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseprint();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f9();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      s2 = peg$parsecreacionVariable();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f10();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r0.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = input.charAt(peg$currPos);
      if (peg$r0.test(s1)) {
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
    }
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e0); }

    return s0;
  }

  function peg$parseerrorLexico() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = peg$parse_();
    s4 = [];
    s5 = peg$currPos;
    s6 = peg$currPos;
    peg$silentFails++;
    s7 = peg$parsetokens();
    peg$silentFails--;
    if (s7 === peg$FAILED) {
      s6 = undefined;
    } else {
      peg$currPos = s6;
      s6 = peg$FAILED;
    }
    if (s6 !== peg$FAILED) {
      s7 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 10) {
        s8 = peg$c0;
        peg$currPos++;
      } else {
        s8 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      peg$silentFails--;
      if (s8 === peg$FAILED) {
        s7 = undefined;
      } else {
        peg$currPos = s7;
        s7 = peg$FAILED;
      }
      if (s7 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s8 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s8 !== peg$FAILED) {
          s6 = [s6, s7, s8];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
    } else {
      peg$currPos = s5;
      s5 = peg$FAILED;
    }
    if (s5 !== peg$FAILED) {
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$currPos;
        s6 = peg$currPos;
        peg$silentFails++;
        s7 = peg$parsetokens();
        peg$silentFails--;
        if (s7 === peg$FAILED) {
          s6 = undefined;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 10) {
            s8 = peg$c0;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e2); }
          }
          peg$silentFails--;
          if (s8 === peg$FAILED) {
            s7 = undefined;
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s8 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e3); }
            }
            if (s8 !== peg$FAILED) {
              s6 = [s6, s7, s8];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      }
    } else {
      s4 = peg$FAILED;
    }
    if (s4 !== peg$FAILED) {
      s3 = [s3, s4];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f11(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsetokens() {
    var s0;

    s0 = peg$parsevoid();
    if (s0 === peg$FAILED) {
      s0 = peg$parsemain();
      if (s0 === peg$FAILED) {
        s0 = input.charAt(peg$currPos);
        if (peg$r1.test(s0)) {
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseprint();
          if (s0 === peg$FAILED) {
            s0 = input.charAt(peg$currPos);
            if (peg$r2.test(s0)) {
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parsetipoVariable();
              if (s0 === peg$FAILED) {
                s0 = peg$parseidentificador();
                if (s0 === peg$FAILED) {
                  s0 = input.charAt(peg$currPos);
                  if (peg$r3.test(s0)) {
                    peg$currPos++;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e6); }
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsemas();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsemenos();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsemul();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsediv();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsepot();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsevoid() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c1) {
      s0 = peg$c1;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }

    return s0;
  }

  function peg$parsemain() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c2) {
      s0 = peg$c2;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }

    return s0;
  }

  function peg$parsepar1() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 40) {
      s0 = peg$c3;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }

    return s0;
  }

  function peg$parsepar2() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 41) {
      s0 = peg$c4;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }

    return s0;
  }

  function peg$parsecorch1() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 123) {
      s0 = peg$c5;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }

    return s0;
  }

  function peg$parsecorch2() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 125) {
      s0 = peg$c6;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }

    return s0;
  }

  function peg$parseprint() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c7) {
      s0 = peg$c7;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }

    return s0;
  }

  function peg$parsefinInstruccion() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 59) {
      s0 = peg$c8;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }

    return s0;
  }

  function peg$parseasignacion() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 61) {
      s0 = peg$c9;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }

    return s0;
  }

  function peg$parsemas() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 43) {
      s1 = peg$c10;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f12();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsemenos() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c11;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f13();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsemul() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 42) {
      s1 = peg$c12;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f14();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsediv() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 47) {
      s1 = peg$c13;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f15();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsepot() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 94) {
      s1 = peg$c14;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f16();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsemayorQue() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 62) {
      s1 = peg$c15;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f17();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsemenorQue() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 60) {
      s1 = peg$c16;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f18();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseigual() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c17) {
      s1 = peg$c17;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f19();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsemayorIGualQue() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c18) {
      s1 = peg$c18;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f20();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsemenorIGualQue() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c19) {
      s1 = peg$c19;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f21();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsenegacion() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c20) {
      s1 = peg$c20;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f22();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsebooleano() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c21) {
      s1 = peg$c21;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f23();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c22) {
        s1 = peg$c22;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e28); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f24();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseoperacionesRelacionales() {
    var s0;

    s0 = peg$parsemayorIGualQue();
    if (s0 === peg$FAILED) {
      s0 = peg$parsemenorIGualQue();
      if (s0 === peg$FAILED) {
        s0 = peg$parseigual();
        if (s0 === peg$FAILED) {
          s0 = peg$parsenegacion();
          if (s0 === peg$FAILED) {
            s0 = peg$parsemayorQue();
            if (s0 === peg$FAILED) {
              s0 = peg$parsemenorQue();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsecadena() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 34) {
      s2 = peg$c23;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r4.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e30); }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = input.charAt(peg$currPos);
        if (peg$r4.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e30); }
        }
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s4 = peg$c23;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e29); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f25(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseidentificador() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r5.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r5.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e31); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r6.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e32); }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = input.charAt(peg$currPos);
        if (peg$r6.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e32); }
        }
      }
      s4 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f26(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetipoVariable() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c24) {
      s0 = peg$c24;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c25) {
        s0 = peg$c25;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e34); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c26) {
          s0 = peg$c26;
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e35); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c27) {
            s0 = peg$c27;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e36); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c28) {
              s0 = peg$c28;
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e37); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c1) {
                s0 = peg$c1;
                peg$currPos += 4;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e7); }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsetipoAsignacion() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseorExpresion();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f27(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseexpresionNumerica();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f28(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsecadena();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f29(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parsecreacionVariable() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parsetipoVariable();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseidentificador();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseasignacion();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parsetipoAsignacion();
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s10 = peg$parsefinInstruccion();
            if (s10 !== peg$FAILED) {
              s11 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f30(s2, s4, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexpresionNumerica() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsetermino1();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parsemas();
      if (s5 === peg$FAILED) {
        s5 = peg$parsemenos();
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parsetermino1();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parsemas();
        if (s5 === peg$FAILED) {
          s5 = peg$parsemenos();
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parsetermino1();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f31(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetermino1() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsetermino2();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parsemul();
      if (s5 === peg$FAILED) {
        s5 = peg$parsediv();
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parsetermino2();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parsemul();
        if (s5 === peg$FAILED) {
          s5 = peg$parsediv();
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parsetermino2();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f32(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetermino2() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsetermino3();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parsepot();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parsetermino3();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parsepot();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parsetermino3();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f33(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetermino3() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsepar1();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseexpresionNumerica();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parsepar2();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f34(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsenumero();
    }

    return s0;
  }

  function peg$parsenumero() {
    var s0;

    s0 = peg$parsefloat();
    if (s0 === peg$FAILED) {
      s0 = peg$parseentero();
    }

    return s0;
  }

  function peg$parseentero() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r7.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r8.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r8.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e39); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f35(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefloat() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r7.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r8.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r8.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e39); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c29;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e40); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = input.charAt(peg$currPos);
        if (peg$r8.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e39); }
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = input.charAt(peg$currPos);
            if (peg$r8.test(s5)) {
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e39); }
            }
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f36(s1, s2, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseorExpresion() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseandExpresion();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c30) {
        s5 = peg$c30;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e41); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseandExpresion();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c30) {
          s5 = peg$c30;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e41); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseandExpresion();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f37(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseandExpresion() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsenotExpresion();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c31) {
        s5 = peg$c31;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e42); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parsenotExpresion();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c31) {
          s5 = peg$c31;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e42); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parsenotExpresion();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f38(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenotExpresion() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 33) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e43); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsenotExpresion();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f39(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c3;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseorExpresion();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s5 = peg$c4;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e10); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f40(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseexpresionBoleana();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f41(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsebooleano();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f42(s1);
          }
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parseexpresionBoleana() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseexpresionBooleanaNumerica();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f43(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseexpresionBooleanaCadena();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f44(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseexpresionBooleanaNumerica() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseexpresionNumerica();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseoperacionesRelacionales();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseexpresionNumerica();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f45(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexpresionBooleanaCadena() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsecadena();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseoperacionesRelacionales();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parsecadena();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f46(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }


  /** @type {Map<string, any>} */
    const tablaSimboloGeneral = new Map();
    let errorSintactico=false; 
    const errores = [];

  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

const peg$allowedStartRules = [
  "start"
];

export {
  peg$allowedStartRules as StartRules,
  peg$SyntaxError as SyntaxError,
  peg$parse as parse
};
